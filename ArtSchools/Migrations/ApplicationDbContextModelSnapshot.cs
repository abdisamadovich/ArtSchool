// <auto-generated />
using System;
using ArtSchools.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArtSchools.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtSchools.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("ShortDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("short_description_en");

                    b.Property<string>("ShortDescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_oz");

                    b.Property<string>("ShortDescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("short_description_ru");

                    b.Property<string>("ShortDescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_uz");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("announcements", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("ShortDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("short_description_en");

                    b.Property<string>("ShortDescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_oz");

                    b.Property<string>("ShortDescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("short_description_ru");

                    b.Property<string>("ShortDescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_uz");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("banners", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("books", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean")
                        .HasColumnName("is_new");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("contact_us", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("directions", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("district", "schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameEn = "Bektemir District",
                            NameOz = "Bektemir tumani",
                            NameRu = "Бектемирский район",
                            NameUz = "Бектемир тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            NameEn = "Chilonzor District",
                            NameOz = "Chilonzor tumani",
                            NameRu = "Чиланзарский район",
                            NameUz = "Чиланзар тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 3,
                            NameEn = "Yashnobod District",
                            NameOz = "Yashnobod tumani",
                            NameRu = "Яшнабадский район",
                            NameUz = "Яшнобод тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 4,
                            NameEn = "Mirobod District",
                            NameOz = "Mirobod tumani",
                            NameRu = "Мирабадский район",
                            NameUz = "Миробод тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 5,
                            NameEn = "Mirzo Ulug‘bek District",
                            NameOz = "Mirzo Ulug‘bek tumani",
                            NameRu = "Мирзо-Улугбекский район",
                            NameUz = "Мирзо Улуғбек тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 6,
                            NameEn = "Sergeli District",
                            NameOz = "Sergeli tumani",
                            NameRu = "Сергелийский район",
                            NameUz = "Сергели тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 7,
                            NameEn = "Uchtepa District",
                            NameOz = "Uchtepa tumani",
                            NameRu = "Учтепинский район",
                            NameUz = "Учтепа тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 8,
                            NameEn = "Shayxontohur District",
                            NameOz = "Shayxontohur tumani",
                            NameRu = "Шайхантахурский район",
                            NameUz = "Шайхонтоҳур тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 9,
                            NameEn = "Olmazor District",
                            NameOz = "Olmazor tumani",
                            NameRu = "Алмазарский район",
                            NameUz = "Олмазор тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 10,
                            NameEn = "Yunusobod District",
                            NameOz = "Yunusobod tumani",
                            NameRu = "Юнусабадский район",
                            NameUz = "Юнусобод тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 11,
                            NameEn = "Yakkasaroy District",
                            NameOz = "Yakkasaroy tumani",
                            NameRu = "Яккасарайский район",
                            NameUz = "Яккасарой тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 12,
                            NameEn = "Yangiha’yot District",
                            NameOz = "Yangiha’yot tumani",
                            NameRu = "Янгахайотский район",
                            NameUz = "Янгиҳаёт тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 13,
                            NameEn = "Oltiariq District",
                            NameOz = "Oltiariq tumani",
                            NameRu = "Алтыарыкский район",
                            NameUz = "Олтиариқ тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 14,
                            NameEn = "Bog‘dod District",
                            NameOz = "Bog‘dod tumani",
                            NameRu = "Багдадский район",
                            NameUz = "Боғдод тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 15,
                            NameEn = "Beshariq District",
                            NameOz = "Beshariq tumani",
                            NameRu = "Бешарыкский район",
                            NameUz = "Бешариқ тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 16,
                            NameEn = "Buvayda District",
                            NameOz = "Buvayda tumani",
                            NameRu = "Бувайдинский район",
                            NameUz = "Бувайда тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 17,
                            NameEn = "Dang‘ara District",
                            NameOz = "Dang‘ara tumani",
                            NameRu = "Дангаринский район",
                            NameUz = "Данғара тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 18,
                            NameEn = "Quva District",
                            NameOz = "Quva tumani",
                            NameRu = "Кувинский район",
                            NameUz = "Қува тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 19,
                            NameEn = "Qo‘shtepa District",
                            NameOz = "Qo‘shtepa tumani",
                            NameRu = "Куштепинский район",
                            NameUz = "Қўштепа тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 20,
                            NameEn = "Rishton District",
                            NameOz = "Rishton tumani",
                            NameRu = "Риштанский район",
                            NameUz = "Риштон тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 21,
                            NameEn = "So‘x District",
                            NameOz = "So‘x tumani",
                            NameRu = "Сохский район",
                            NameUz = "Сўх тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 22,
                            NameEn = "Toshloq District",
                            NameOz = "Toshloq tumani",
                            NameRu = "Ташлакский район",
                            NameUz = "Тошлоқ тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 23,
                            NameEn = "O‘zbekiston District",
                            NameOz = "O‘zbekiston tumani",
                            NameRu = "Узбекистанский район",
                            NameUz = "Ўзбекистон тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 24,
                            NameEn = "Uchko‘prik District",
                            NameOz = "Uchko‘prik tumani",
                            NameRu = "Учкуприкский район",
                            NameUz = "Учкўприк тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 25,
                            NameEn = "Farg‘ona District",
                            NameOz = "Farg‘ona tumani",
                            NameRu = "Ферганский район",
                            NameUz = "Фарғона тумани",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 26,
                            NameEn = "Furqat District",
                            NameOz = "Furqat tumani",
                            NameRu = "Фуркатский район",
                            NameUz = "Фурқат тумани",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 27,
                            NameEn = "Yozovon District",
                            NameOz = "Yozovon tumani",
                            NameRu = "Язёванский район",
                            NameUz = "Ёзёвон тумани",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsHead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_head");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("employees", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int?>("DirectionId")
                        .HasColumnType("integer")
                        .HasColumnName("direction_id");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("ShortDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("short_description_en");

                    b.Property<string>("ShortDescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_oz");

                    b.Property<string>("ShortDescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("short_description_ru");

                    b.Property<string>("ShortDescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_uz");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("events", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("faqs", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extension")
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("integer")
                        .HasColumnName("gallery_id");

                    b.Property<string>("Mime")
                        .HasColumnType("text")
                        .HasColumnName("mime");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("file", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("galleries", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("ShortDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("short_description_en");

                    b.Property<string>("ShortDescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_oz");

                    b.Property<string>("ShortDescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("short_description_ru");

                    b.Property<string>("ShortDescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_uz");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("news", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentEn")
                        .HasColumnType("text")
                        .HasColumnName("content_en");

                    b.Property<string>("ContentOz")
                        .HasColumnType("text")
                        .HasColumnName("content_oz");

                    b.Property<string>("ContentRu")
                        .HasColumnType("text")
                        .HasColumnName("content_ru");

                    b.Property<string>("ContentUz")
                        .HasColumnType("text")
                        .HasColumnName("content_uz");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("pages", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PermissionName")
                        .HasColumnType("text")
                        .HasColumnName("permission_name");

                    b.HasKey("Id");

                    b.ToTable("permissions", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionName = "SCHOOL_ACTIONS"
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.HasKey("Id");

                    b.ToTable("region", "schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameEn = "Tashkent City",
                            NameOz = "Toshkent shahar",
                            NameRu = "Город Ташкент",
                            NameUz = "Тошкент шаҳри"
                        },
                        new
                        {
                            Id = 2,
                            NameEn = "Fergana",
                            NameOz = "Farg‘ona viloyati",
                            NameRu = "Ферганская область",
                            NameUz = "Фарғона вилояти"
                        },
                        new
                        {
                            Id = 3,
                            NameEn = "Andijan",
                            NameOz = "Andijon viloyati",
                            NameRu = "Андижанская область",
                            NameUz = "Андижон вилояти"
                        },
                        new
                        {
                            Id = 4,
                            NameEn = "Bukhara",
                            NameOz = "Buxoro viloyati",
                            NameRu = "Бухарская область",
                            NameUz = "Бухоро вилояти"
                        },
                        new
                        {
                            Id = 5,
                            NameEn = "Jizzakh",
                            NameOz = "Jizzax viloyati",
                            NameRu = "Джизакская область",
                            NameUz = "Жиззах вилояти"
                        },
                        new
                        {
                            Id = 6,
                            NameEn = "Qashqadaryo",
                            NameOz = "Qashqadaryo viloyati",
                            NameRu = "Кашкадарьинская область",
                            NameUz = "Қашқадарё вилояти"
                        },
                        new
                        {
                            Id = 7,
                            NameEn = "Navoiy",
                            NameOz = "Navoiy viloyati",
                            NameRu = "Навоийская область",
                            NameUz = "Навоий вилояти"
                        },
                        new
                        {
                            Id = 8,
                            NameEn = "Namangan",
                            NameOz = "Namangan viloyati",
                            NameRu = "Наманганская область",
                            NameUz = "Наманган вилояти"
                        },
                        new
                        {
                            Id = 9,
                            NameEn = "Samarqand",
                            NameOz = "Samarqand viloyati",
                            NameRu = "Самаркандская область",
                            NameUz = "Самарқанд вилояти"
                        },
                        new
                        {
                            Id = 10,
                            NameEn = "Surxondaryo",
                            NameOz = "Surxondaryo viloyati",
                            NameRu = "Сурхандарьинская область",
                            NameUz = "Сурхондарё вилояти"
                        },
                        new
                        {
                            Id = 11,
                            NameEn = "Sirdaryo",
                            NameOz = "Sirdaryo viloyati",
                            NameRu = "Сырдарьинская область",
                            NameUz = "Сирдарё вилояти"
                        },
                        new
                        {
                            Id = 12,
                            NameEn = "Tashkent",
                            NameOz = "Toshkent viloyati",
                            NameRu = "Ташкентская область",
                            NameUz = "Тошкент вилояти"
                        },
                        new
                        {
                            Id = 13,
                            NameEn = "Khorezm",
                            NameOz = "Xorazm viloyati",
                            NameRu = "Хорезмская область",
                            NameUz = "Хоразм вилояти"
                        },
                        new
                        {
                            Id = 14,
                            NameEn = "Karakalpakstan",
                            NameOz = "Qoraqalpog‘iston Respublikasi",
                            NameRu = "Республика Каракалпакстан",
                            NameUz = "Қорақалпоғистон Республикаси"
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "School admin"
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permission", "identity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("AgeLvlFive")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_five");

                    b.Property<int>("AgeLvlFour")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_four");

                    b.Property<int>("AgeLvlOne")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_one");

                    b.Property<int>("AgeLvlSix")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_six");

                    b.Property<int>("AgeLvlThree")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_three");

                    b.Property<int>("AgeLvlTwo")
                        .HasColumnType("integer")
                        .HasColumnName("age_lvl_two");

                    b.Property<int>("BoyCount")
                        .HasColumnType("integer")
                        .HasColumnName("boy_count");

                    b.Property<int>("ClassCount")
                        .HasColumnType("integer")
                        .HasColumnName("class_count");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("DomainId")
                        .HasColumnType("text")
                        .HasColumnName("domain_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("text")
                        .HasColumnName("facebook_link");

                    b.Property<int>("GirlCount")
                        .HasColumnType("integer")
                        .HasColumnName("girl_count");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("text")
                        .HasColumnName("instagram_link");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<TimeSpan?>("LunchEnd")
                        .HasColumnType("interval")
                        .HasColumnName("lunch_end");

                    b.Property<TimeSpan?>("LunchStart")
                        .HasColumnType("interval")
                        .HasColumnName("lunch_start");

                    b.Property<string>("Map")
                        .HasColumnType("text")
                        .HasColumnName("map");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("ShortDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("short_description_en");

                    b.Property<string>("ShortDescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_oz");

                    b.Property<string>("ShortDescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("short_description_ru");

                    b.Property<string>("ShortDescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("short_description_uz");

                    b.Property<string>("SiteLink")
                        .HasColumnType("text")
                        .HasColumnName("site_link");

                    b.Property<int>("SpecialClassCount")
                        .HasColumnType("integer")
                        .HasColumnName("special_class_count");

                    b.Property<int>("StudentCount")
                        .HasColumnType("integer")
                        .HasColumnName("student_count");

                    b.Property<int>("TeacherCount")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_count");

                    b.Property<string>("TelegramLink")
                        .HasColumnType("text")
                        .HasColumnName("telegram_link");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text")
                        .HasColumnName("video_link");

                    b.Property<int?>("WorkingDaysEnd")
                        .HasColumnType("integer")
                        .HasColumnName("working_days_end");

                    b.Property<int?>("WorkingDaysStart")
                        .HasColumnType("integer")
                        .HasColumnName("working_days_start");

                    b.Property<TimeSpan?>("WorkingHoursEnd")
                        .HasColumnType("interval")
                        .HasColumnName("working_hours_end");

                    b.Property<TimeSpan?>("WorkingHoursStart")
                        .HasColumnType("interval")
                        .HasColumnName("working_hours_start");

                    b.Property<int>("Years")
                        .HasColumnType("integer")
                        .HasColumnName("years");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("text")
                        .HasColumnName("youtube_link");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RegionId");

                    b.ToTable("schools", "schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeLvlFive = 0,
                            AgeLvlFour = 0,
                            AgeLvlOne = 0,
                            AgeLvlSix = 0,
                            AgeLvlThree = 0,
                            AgeLvlTwo = 0,
                            BoyCount = 0,
                            ClassCount = 0,
                            DistrictId = 5,
                            GirlCount = 0,
                            IsDeleted = false,
                            NameEn = "Madaniyat.uz",
                            NameOz = "Madaniyat.uz",
                            NameRu = "Madaniyat.uz",
                            NameUz = "Madaniyat.uz",
                            Number = 0,
                            RegionId = 1,
                            SpecialClassCount = 0,
                            StudentCount = 0,
                            TeacherCount = 0,
                            Type = "MINISTRY",
                            Years = 0
                        });
                });

            modelBuilder.Entity("ArtSchools.Entities.TopStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("top_student", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("users", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<string>("PerksEn")
                        .HasColumnType("text")
                        .HasColumnName("perks_en");

                    b.Property<string>("PerksOz")
                        .HasColumnType("text")
                        .HasColumnName("perks_oz");

                    b.Property<string>("PerksRu")
                        .HasColumnType("text")
                        .HasColumnName("perks_ru");

                    b.Property<string>("PerksUz")
                        .HasColumnType("text")
                        .HasColumnName("perks_uz");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<string>("RequirementsEn")
                        .HasColumnType("text")
                        .HasColumnName("requirements_en");

                    b.Property<string>("RequirementsOz")
                        .HasColumnType("text")
                        .HasColumnName("requirements_oz");

                    b.Property<string>("RequirementsRu")
                        .HasColumnType("text")
                        .HasColumnName("requirements_ru");

                    b.Property<string>("RequirementsUz")
                        .HasColumnType("text")
                        .HasColumnName("requirements_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("vacancies", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Announcement", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Banner", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Book", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Books")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.ContactUs", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Direction", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Directions")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.HasOne("ArtSchools.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ArtSchools.Entities.Employee", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Event", b =>
                {
                    b.HasOne("ArtSchools.Entities.Direction", "Direction")
                        .WithOne("Event")
                        .HasForeignKey("ArtSchools.Entities.Event", "DirectionId");

                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Events")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.FAQ", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Faqs")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.File", b =>
                {
                    b.HasOne("ArtSchools.Entities.Gallery", "Gallery")
                        .WithMany("Files")
                        .HasForeignKey("GalleryId");

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("ArtSchools.Entities.Gallery", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Galleries")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.News", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("News")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Page", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.RolePermission", b =>
                {
                    b.HasOne("ArtSchools.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.HasOne("ArtSchools.Entities.District", "District")
                        .WithMany("Schools")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ArtSchools.Entities.Region", "Region")
                        .WithMany("Schools")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Image");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ArtSchools.Entities.TopStudent", b =>
                {
                    b.HasOne("ArtSchools.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("TopStudents")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.UserRole", b =>
                {
                    b.HasOne("ArtSchools.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtSchools.Entities.Vacancy", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Vacancies")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Direction", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Gallery", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ArtSchools.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ArtSchools.Entities.Region", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Directions");

                    b.Navigation("Employees");

                    b.Navigation("Events");

                    b.Navigation("Faqs");

                    b.Navigation("Galleries");

                    b.Navigation("News");

                    b.Navigation("TopStudents");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
