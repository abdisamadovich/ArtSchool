// <auto-generated />
using System;
using ArtSchools.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArtSchools.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240530043419_SchoolEntitiesAdded")]
    partial class SchoolEntitiesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtSchools.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("books", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("directions", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("district", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("employees", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("events", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("faqs", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("galleries", "school");
                });

            modelBuilder.Entity("ArtSchools.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("news", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PermissionName")
                        .HasColumnType("text")
                        .HasColumnName("permission_name");

                    b.HasKey("Id");

                    b.ToTable("permissions", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.HasKey("Id");

                    b.ToTable("region", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permission", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<TimeSpan>("LunchEnd")
                        .HasColumnType("interval")
                        .HasColumnName("lunch_end");

                    b.Property<TimeSpan>("LunchStart")
                        .HasColumnType("interval")
                        .HasColumnName("lunch_start");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameOz")
                        .HasColumnType("text")
                        .HasColumnName("name_oz");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NameUz")
                        .HasColumnType("text")
                        .HasColumnName("name_uz");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("SiteLink")
                        .HasColumnType("text")
                        .HasColumnName("site_link");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("WorkingDaysEnd")
                        .HasColumnType("integer")
                        .HasColumnName("working_days_end");

                    b.Property<int>("WorkingDaysStart")
                        .HasColumnType("integer")
                        .HasColumnName("working_days_start");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval")
                        .HasColumnName("working_hours_end");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval")
                        .HasColumnName("working_hours_start");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.ToTable("schools", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.TopStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("top_student", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("users", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", "identity");
                });

            modelBuilder.Entity("ArtSchools.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("DescriptionOz")
                        .HasColumnType("text")
                        .HasColumnName("description_oz");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasColumnName("description_ru");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text")
                        .HasColumnName("description_uz");

                    b.Property<string>("PerksEn")
                        .HasColumnType("text")
                        .HasColumnName("perks_en");

                    b.Property<string>("PerksOz")
                        .HasColumnType("text")
                        .HasColumnName("perks_oz");

                    b.Property<string>("PerksRu")
                        .HasColumnType("text")
                        .HasColumnName("perks_ru");

                    b.Property<string>("PerksUz")
                        .HasColumnType("text")
                        .HasColumnName("perks_uz");

                    b.Property<string>("PositionEn")
                        .HasColumnType("text")
                        .HasColumnName("position_en");

                    b.Property<string>("PositionOz")
                        .HasColumnType("text")
                        .HasColumnName("position_oz");

                    b.Property<string>("PositionRu")
                        .HasColumnType("text")
                        .HasColumnName("position_ru");

                    b.Property<string>("PositionUz")
                        .HasColumnType("text")
                        .HasColumnName("position_uz");

                    b.Property<string>("RequirementsEn")
                        .HasColumnType("text")
                        .HasColumnName("requirements_en");

                    b.Property<string>("RequirementsOz")
                        .HasColumnType("text")
                        .HasColumnName("requirements_oz");

                    b.Property<string>("RequirementsRu")
                        .HasColumnType("text")
                        .HasColumnName("requirements_ru");

                    b.Property<string>("RequirementsUz")
                        .HasColumnType("text")
                        .HasColumnName("requirements_uz");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_en");

                    b.Property<string>("TitleOz")
                        .HasColumnType("text")
                        .HasColumnName("title_oz");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text")
                        .HasColumnName("title_ru");

                    b.Property<string>("TitleUz")
                        .HasColumnType("text")
                        .HasColumnName("title_uz");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("vacancies", "schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Book", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Books")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Direction", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Directions")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.HasOne("ArtSchools.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ArtSchools.Entities.Employee", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Event", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Events")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.FAQ", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Faqs")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.Gallery", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("Galleries")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.News", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("News")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.RolePermission", b =>
                {
                    b.HasOne("ArtSchools.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.HasOne("ArtSchools.Entities.District", "District")
                        .WithMany("Schools")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.Region", "Region")
                        .WithMany("Schools")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ArtSchools.Entities.TopStudent", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany("TopStudents")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ArtSchools.Entities.UserRole", b =>
                {
                    b.HasOne("ArtSchools.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSchools.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtSchools.Entities.Vacancy", b =>
                {
                    b.HasOne("ArtSchools.Entities.School", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("ArtSchools.Entities.District", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ArtSchools.Entities.Region", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ArtSchools.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ArtSchools.Entities.School", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Directions");

                    b.Navigation("Employees");

                    b.Navigation("Events");

                    b.Navigation("Faqs");

                    b.Navigation("Galleries");

                    b.Navigation("News");

                    b.Navigation("TopStudents");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("ArtSchools.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
